# FormularIQ - Systemzusammenfassung (Version 2.0.0)

## PROJEKT√úBERSICHT
- **Projekt**: FormularIQ - LLM-gest√ºtzte Formularbearbeitung
- **Institution**: HAW Hamburg, Masterarbeit Wintersemester 2024/25
- **Forscher**: Moritz Treu
- **Deployment**: Vercel (https://mein-formularprojekt.vercel.app)

## STUDIENZIEL
Vergleich zweier Ans√§tze zur intelligenten Formularbearbeitung:
- **Variante A**: Klassisches sichtbares Formular mit KI-Chat-Unterst√ºtzung
- **Variante B**: Interaktives Dialog-System mit konversationeller Datenerfassung
- **Testszenario**: Geb√§ude-Energieberatung f√ºr Mehrfamilienhaus (Baujahr 1965)

## TECH STACK
- **Frontend**: Next.js 15.4.1, TypeScript, Tailwind CSS, shadcn/ui
- **Backend**: Next.js API Routes (Vercel Functions)
- **Deployment**: Vercel (Full-Stack Next.js)
- **Datenspeicherung**: Vercel Logging (strukturierte console.log)
- **State Management**: React State (kein Browser Storage)

## PROJEKTSTRUKTUR
```
FormularIQ/
‚îú‚îÄ‚îÄ src/app/
‚îÇ   ‚îú‚îÄ‚îÄ page.tsx                    # Redirect zur Studie
‚îÇ   ‚îú‚îÄ‚îÄ study/page.tsx              # Haupt-Studienablauf
‚îÇ   ‚îú‚îÄ‚îÄ form-a/page.tsx             # Variante A Wrapper
‚îÇ   ‚îú‚îÄ‚îÄ form-b/page.tsx             # Variante B Wrapper
‚îÇ   ‚îî‚îÄ‚îÄ api/                        # Backend API Routes
‚îÇ       ‚îú‚îÄ‚îÄ health/route.ts         # Health Check
‚îÇ       ‚îú‚îÄ‚îÄ save/route.ts           # Variante A Daten
‚îÇ       ‚îú‚îÄ‚îÄ dialog/save/route.ts    # Variante B Daten
‚îÇ       ‚îú‚îÄ‚îÄ questionnaire/save/route.ts # Fragebogen-Daten
‚îÇ       ‚îî‚îÄ‚îÄ study/complete/route.ts # Studie-Abschluss
‚îú‚îÄ‚îÄ src/components/
‚îÇ   ‚îú‚îÄ‚îÄ VariantA.tsx                # Sichtbares Formular
‚îÇ   ‚îú‚îÄ‚îÄ VariantB.tsx                # Dialog-System
‚îÇ   ‚îú‚îÄ‚îÄ LoadingStates.tsx           # UI Loading Components
‚îÇ   ‚îú‚îÄ‚îÄ ui/                         # shadcn/ui Komponenten
‚îÇ   ‚îî‚îÄ‚îÄ Questionnaire/              # Fragebogen-System
‚îÇ       ‚îú‚îÄ‚îÄ EnhancedQuestionnaire.tsx # Haupt-Fragebogen
‚îÇ       ‚îú‚îÄ‚îÄ TrustQuestionnaire.tsx  # Vertrauen (5-Punkt Likert)
‚îÇ       ‚îú‚îÄ‚îÄ SUSQuestionnaire.tsx    # System Usability Scale
‚îÇ       ‚îú‚îÄ‚îÄ PreferenceQuestionnaire.tsx # Nutzerpr√§ferenz
‚îÇ       ‚îî‚îÄ‚îÄ LikertScale.tsx         # Wiederverwendbare Skala
```

## STUDIENABLAUF (6 Schritte)
```
1. intro ‚Üí 2. demographics ‚Üí 3. variant1_intro ‚Üí [Variante] ‚Üí 4. variant1_survey ‚Üí 
5. variant2_intro ‚Üí [Variante] ‚Üí 6. variant2_survey ‚Üí 7. final_comparison ‚Üí 8. complete
```

## RANDOMISIERUNG
- **Deterministische Randomisierung** basierend auf Teilnehmer-ID
- **Konsistente Zuordnung**: A-B oder B-A Order bleibt w√§hrend Session gleich
- **URL-Parameter**: step, participant, variant f√ºr Navigation

## FRAGEBOGEN-SYSTEM
### Pro Variante (A/B):
- **Vertrauen**: 5 Items (Zuverl√§ssigkeit, Genauigkeit, Empfehlungen, Datenschutz, Entscheidungsunterst√ºtzung)
- **SUS**: Standard 10-Item System Usability Scale
- **Navigation**: Sektionsweise mit Fortschrittsanzeige und Validierung

### Vergleichs-Fragebogen:
- **Direkte Vergleiche**: Geschwindigkeit, Einfachheit, Hilfen, Kontrolle (Radio Buttons)
- **Pr√§ferenz-Bewertungen**: 5 Likert-Skalen f√ºr Empfehlungen und Zukunftsnutzung
- **Kontext-Spezifisch**: Pr√§ferenz f√ºr einfache vs. komplexe Formulare
- **Freitext**: Begr√ºndung der Pr√§ferenz

### Analytics:
- **SUS-Score**: Automatische Berechnung (0-100)
- **Trust-Level**: Kategorisierung (low/medium/high)
- **Completion-Times**: Detailliertes Timing pro Sektion
- **Preference-Direction**: Klare Pr√§ferenz-Klassifikation

## API ENDPOINTS
- GET /api/health - System Health Check
- POST /api/save - Variante A Formulardaten
- POST /api/dialog/save - Variante B Dialogdaten
- POST /api/questionnaire/save - Fragebogen-Daten mit Analytics
- POST /api/study/complete - Vollst√§ndige Studien-Zusammenfassung

## DATENFORMAT BEISPIEL
```json
{
  "type": "questionnaire_response",
  "variant": "A|B|comparison",
  "participant_id": "string",
  "responses": {
    "trust": {},
    "sus": {},
    "preference": {}
  },
  "analytics": {
    "sus_score": "number",
    "trust_analysis": {
      "average_score": "number",
      "trust_level": "string"
    },
    "preference_analysis": {
      "overall_preference_direction": "string"
    }
  },
  "timing": {
    "section_times": {},
    "total_duration": "number"
  },
  "study_metadata": {
    "project": "FormularIQ - LLM-gest√ºtzte Formularbearbeitung",
    "institution": "HAW Hamburg",
    "version": "2.0.0"
  }
}
```

## DEBUG-SYSTEM
### Logging-Pattern in Browser Console (F12):
- üé≤ DEBUG Randomization: Teilnehmer-ID, Randomisierung, Varianten-Zuordnung
- üêõ DEBUG [Component]: Kritische State-√úberg√§nge und Navigation
- üîÑ DEBUG Navigation: Schritt-zu-Schritt Weiterleitung
- üìã Questionnaire completed: Vollst√§ndige Fragebogen-Daten
- ‚úÖ [Action] saved: Erfolgreiche API-Calls

## VERCEL-EINSCHR√ÑNKUNGEN
- **Kein Browser Storage**: localStorage/sessionStorage nicht verf√ºgbar
- **Serverless Functions**: Stateless, keine persistente Speicherung
- **Rate Limits**: API-Calls haben Vercel-spezifische Limits
- **LLM Development Only**: Ollama+LLaMA3 nur f√ºr lokale Entwicklung

## KRITISCHE NAVIGATION-LOGIK
```javascript
// study/page.tsx - Hauptnavigation
const getFirstVariant = () => randomization === 'A-B' ? 'A' : 'B'
const getSecondVariant = () => randomization === 'A-B' ? 'B' : 'A'

// VariantA.tsx / VariantB.tsx - Nach Formular/Dialog
const nextStep = step === '2' ? 'variant1_survey' : 'variant2_survey'
router.push(`/study?step=${nextStep}&participant=${participantId}`)

// EnhancedQuestionnaire.tsx - Wichtige React Keys
<EnhancedQuestionnaire 
  key={`variant1-${variant}-questionnaire`}  // Kritisch f√ºr React!
  variant={variant}
  ...
/>
```

## H√ÑUFIGE PROBLEME & L√ñSUNGEN
1. **"React Hook Rules"**: Alle useEffect/useState m√ºssen vor return/conditionals stehen
2. **Fragebogen falsche Variante**: React-Keys und variant-Prop-Forcing pr√ºfen
3. **Randomisierung inkonsistent**: Deterministische Hash-Funktion basierend auf participantId
4. **Navigation-Loops**: Debug-Logs verfolgen f√ºr step-Parameter und nextStep-Logic
5. **Deployment-Fehler**: Next.js Build-Errors meist durch conditional Hook-Calls

## HEALTH CHECK
```bash
curl https://mein-formularprojekt.vercel.app/api/health
# Erwartung: {"status": "healthy", "services": {"vercel_api_routes": "online"}}
```

## DATENAUSWERTUNG
### Verf√ºgbare Metriken:
- Completion Rates (pro Variante und Gesamt)
- SUS Scores (mit automatischer Berechnung und Vergleich)
- Trust Levels (kategorisiert mit Durchschnittswerten)
- Preference Patterns (direkte Vergleiche und Kontext-spezifische Pr√§ferenzen)
- Timing Data (detaillierte Zeitmessungen pro Abschnitt)
- Demographics (vollst√§ndige Teilnehmer-Profile)

### Export:
Alle Daten als strukturierte JSON-Objekte in Vercel-Logs, exportierbar √ºber Vercel Dashboard oder CLI.

## VERSION INFO
- **Version**: 2.0.0
- **Letztes Update**: August 2025
- **Status**: Production-Ready f√ºr Studie
- **GitHub**: momorit/mein-formularprojekt
- **Deployment-URL**: https://mein-formularprojekt.vercel.app

## WICHTIGE DATEIEN F√úR √ÑNDERUNGEN
- src/app/study/page.tsx - Haupt-Studienablauf und Navigation
- src/components/Questionnaire/EnhancedQuestionnaire.tsx - Fragebogen-System
- src/components/VariantA.tsx - Formular-Interface
- src/components/VariantB.tsx - Dialog-Interface
- src/app/api/questionnaire/save/route.ts - Fragebogen-API mit Analytics