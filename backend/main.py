# backend/main.py - VOLLST√ÑNDIGE FINALE VERSION
import os
import sys
import json
import logging
import base64
from datetime import datetime
from typing import Dict, Any, List, Optional
from pathlib import Path

# Logging setup
logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)

# Railway configuration
PORT = int(os.getenv("PORT", 8000))
HOST = "0.0.0.0"
RAILWAY_ENVIRONMENT = os.getenv("RAILWAY_ENVIRONMENT")
IS_PRODUCTION = RAILWAY_ENVIRONMENT is not None

logger.info(f"üöÄ FormularIQ Backend v3.2.0 - Complete Edition")
logger.info(f"üìç Port: {PORT}, Environment: {'PRODUCTION' if IS_PRODUCTION else 'DEVELOPMENT'}")

# Core imports
try:
    from fastapi import FastAPI, HTTPException, Request
    from fastapi.middleware.cors import CORSMiddleware
    from pydantic import BaseModel
    import uvicorn
    import aiofiles
    import requests
    logger.info("‚úÖ Core FastAPI imports successful")
except Exception as e:
    logger.error(f"‚ùå Core import error: {e}")
    sys.exit(1)

# LLM imports
GROQ_AVAILABLE = False
try:
    import groq
    GROQ_AVAILABLE = True
    logger.info("‚úÖ Groq LLM available")
except ImportError:
    logger.warning("‚ö†Ô∏è Groq not available - install with: pip install groq")

# Google Drive imports
GOOGLE_DRIVE_AVAILABLE = False
try:
    from google.oauth2 import service_account
    from googleapiclient.discovery import build
    from googleapiclient.http import MediaIoBaseUpload
    import io
    GOOGLE_DRIVE_AVAILABLE = True
    logger.info("‚úÖ Google Drive libraries available")
except ImportError:
    logger.warning("‚ö†Ô∏è Google Drive not available - install with: pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib")

# Configuration
LOCAL_OUTPUT_DIR = Path("LLM Output")
LOCAL_OUTPUT_DIR.mkdir(exist_ok=True)
GOOGLE_DRIVE_FOLDER_NAME = 'FormularIQ_Studiendata'

# === FASTAPI APP ===
app = FastAPI(
    title="FormularIQ Backend - Complete Edition",
    description="LLM-gest√ºtzte Formularbearbeitung mit Groq, Google Drive & Chat",
    version="3.2.0",
    docs_url="/docs" if not IS_PRODUCTION else None,
    redoc_url="/redoc" if not IS_PRODUCTION else None
)

# === CORS MIDDLEWARE ===
ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "https://mein-formularprojekt-db8b8pq9n-momorits-projects.vercel.app",
    "https://*.vercel.app",
    "https://*.railway.app",
    "https://*.netlify.app"
]

if not IS_PRODUCTION:
    ALLOWED_ORIGINS.append("*")

app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
    expose_headers=["*"],
    max_age=86400
)

logger.info(f"‚úÖ CORS configured for {len(ALLOWED_ORIGINS)} origins")

# === PYDANTIC MODELS ===
class ContextRequest(BaseModel):
    context: str = ""

class ChatRequest(BaseModel):
    message: str
    context: Optional[str] = ""

class SaveRequest(BaseModel):
    instructions: List[str] = []
    values: Dict[str, str] = {}

class DialogStartRequest(BaseModel):
    context: Optional[str] = ""

class DialogMessageRequest(BaseModel):
    session_id: Optional[str] = ""
    message: str
    currentQuestion: Optional[Dict[str, Any]] = None

class DialogSaveRequest(BaseModel):
    questions: List[Dict[str, str]] = []
    answers: Dict[str, str] = {}
    chatHistory: List[Dict[str, str]] = []

class StudySaveRequest(BaseModel):
    participantId: str
    startTime: str
    randomization: str
    demographics: Optional[Dict[str, str]] = None
    variantAData: Optional[Dict[str, Any]] = None
    variantBData: Optional[Dict[str, Any]] = None
    comparisonData: Optional[Dict[str, Any]] = None
    totalDuration: Optional[int] = None

# === GOOGLE DRIVE FUNCTIONS ===
def get_google_drive_service():
    """Initialize Google Drive service with multiple authentication methods"""
    if not GOOGLE_DRIVE_AVAILABLE:
        logger.info("Google Drive libraries not installed")
        return None
    
    try:
        # Method 1: Environment Variable (JSON string)
        service_account_json = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON")
        if service_account_json:
            try:
                credentials_info = json.loads(service_account_json)
                credentials = service_account.Credentials.from_service_account_info(
                    credentials_info,
                    scopes=['https://www.googleapis.com/auth/drive.file']
                )
                service = build('drive', 'v3', credentials=credentials)
                # Test the service
                service.files().list(pageSize=1).execute()
                logger.info("‚úÖ Google Drive authenticated via environment variable")
                return service
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Environment variable authentication failed: {str(e)[:100]}...")
        
        # Method 2: Base64 encoded JSON
        service_account_b64 = os.getenv("GOOGLE_SERVICE_ACCOUNT_B64")
        if service_account_b64:
            try:
                credentials_json = base64.b64decode(service_account_b64).decode('utf-8')
                credentials_info = json.loads(credentials_json)
                credentials = service_account.Credentials.from_service_account_info(
                    credentials_info,
                    scopes=['https://www.googleapis.com/auth/drive.file']
                )
                service = build('drive', 'v3', credentials=credentials)
                service.files().list(pageSize=1).execute()
                logger.info("‚úÖ Google Drive authenticated via base64")
                return service
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Base64 authentication failed: {str(e)[:100]}...")
        
        # Method 3: Local file (development only)
        if not IS_PRODUCTION:
            service_account_file = Path("service-account-key.json")
            if service_account_file.exists():
                try:
                    credentials = service_account.Credentials.from_service_account_file(
                        service_account_file,
                        scopes=['https://www.googleapis.com/auth/drive.file']
                    )
                    service = build('drive', 'v3', credentials=credentials)
                    service.files().list(pageSize=1).execute()
                    logger.info("‚úÖ Google Drive authenticated via local file")
                    return service
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Local file authentication failed: {str(e)[:100]}...")
        
        logger.info("‚ÑπÔ∏è No Google Drive credentials configured - using local storage only")
        return None
        
    except Exception as e:
        logger.error(f"‚ùå Google Drive setup failed: {str(e)[:100]}...")
        return None

def create_or_get_drive_folder(service, folder_name):
    """Create or find Google Drive folder"""
    if not service:
        return None
    
    try:
        # Search for existing folder
        results = service.files().list(
            q=f"name='{folder_name}' and mimeType='application/vnd.google-apps.folder' and trashed=false",
            fields="files(id, name)"
        ).execute()
        
        folders = results.get('files', [])
        if folders:
            folder_id = folders[0]['id']
            logger.info(f"‚úÖ Google Drive folder found: {folder_name}")
            return folder_id
        
        # Create new folder
        folder_metadata = {
            'name': folder_name,
            'mimeType': 'application/vnd.google-apps.folder'
        }
        folder = service.files().create(body=folder_metadata, fields='id').execute()
        folder_id = folder.get('id')
        logger.info(f"‚úÖ Google Drive folder created: {folder_name}")
        return folder_id
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Google Drive folder operation failed: {str(e)[:100]}...")
        return None

def upload_to_google_drive(service, folder_id, data, filename):
    """Upload data to Google Drive"""
    if not service or not folder_id:
        return None, None
    
    try:
        file_content = json.dumps(data, ensure_ascii=False, indent=2)
        file_stream = io.BytesIO(file_content.encode('utf-8'))
        
        media = MediaIoBaseUpload(file_stream, mimetype='application/json')
        
        file_metadata = {
            'name': filename,
            'parents': [folder_id]
        }
        
        file = service.files().create(
            body=file_metadata,
            media_body=media,
            fields='id,webViewLink'
        ).execute()
        
        file_id = file.get('id')
        web_link = file.get('webViewLink')
        logger.info(f"‚úÖ Google Drive upload successful: {filename}")
        return file_id, web_link
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Google Drive upload failed: {str(e)[:100]}...")
        return None, None

# === LLM SERVICE WITH GROQ ===
def call_llm_service(prompt: str, context: str = "", dialog_mode: bool = False) -> str:
    """Comprehensive LLM service with Groq, Ollama and intelligent fallbacks"""
    
    # 1. Try Groq API first (primary LLM)
    if GROQ_AVAILABLE:
        groq_key = os.getenv("GROQ_API_KEY")
        if groq_key and groq_key.startswith("gsk_"):
            try:
                client = groq.Groq(api_key=groq_key)
                
                system_prompt = """Du bist ein professioneller Assistent f√ºr Geb√§ude-Energieberatung. 
                Antworte pr√§zise, hilfreich und auf Deutsch. Sei freundlich und ermutigend."""
                
                if dialog_mode:
                    system_prompt += """ Du f√ºhrst einen strukturierten Dialog mit dem Nutzer √ºber dessen Geb√§ude. 
                    Best√§tige Antworten kurz und freundlich. Sei ermutigend und professionell."""
                
                full_prompt = f"Kontext: {context}\n\nNutzer-Anfrage: {prompt}" if context else prompt
                
                response = client.chat.completions.create(
                    model="llama3-8b-8192",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": full_prompt}
                    ],
                    temperature=0.3,
                    max_tokens=400,
                    top_p=0.9
                )
                
                result = response.choices[0].message.content.strip()
                if len(result) > 10:
                    logger.info("‚úÖ Groq LLM response successful")
                    return result
                    
            except Exception as groq_error:
                logger.warning(f"‚ö†Ô∏è Groq API failed: {str(groq_error)[:100]}...")
    
    # 2. Try Ollama local service (secondary LLM)
    try:
        ollama_url = "http://localhost:11434/api/generate"
        
        system_prompt = "Du bist ein hilfreicher Assistent f√ºr Geb√§ude-Energieberatung auf Deutsch."
        if dialog_mode:
            system_prompt += " Du f√ºhrst einen strukturierten Dialog √ºber Geb√§udedaten."
        
        full_prompt = f"{system_prompt}\n\nKontext: {context}\n\nAnfrage: {prompt}" if context else f"{system_prompt}\n\n{prompt}"
        
        response = requests.post(ollama_url, json={
            "model": "llama3",
            "prompt": full_prompt,
            "stream": False,
            "options": {
                "temperature": 0.3,
                "top_p": 0.9,
                "max_tokens": 400
            }
        }, timeout=15)
        
        if response.status_code == 200:
            result = response.json().get("response", "").strip()
            if len(result) > 10:
                logger.info("‚úÖ Ollama LLM response successful")
                return result
                
    except Exception as ollama_error:
        logger.warning(f"‚ö†Ô∏è Ollama failed: {str(ollama_error)[:50]}...")
    
    # 3. Intelligent fallback responses (always work)
    logger.info("üîÑ Using intelligent fallback response")
    
    if dialog_mode:
        if "hilfe" in prompt.lower() or "?" in prompt:
            return """üí° Gerne helfe ich Ihnen! 

Hier sind einige typische Beispiele f√ºr Ihre Angaben:
‚Ä¢ **Geb√§udeart:** Einfamilienhaus, Doppelhaush√§lfte, Reihenhaus, Mehrfamilienhaus
‚Ä¢ **Baujahr:** z.B. 1975, 1990, 2005 (wichtig f√ºr Energiestandards)
‚Ä¢ **Heizungsart:** Gasheizung, √ñlheizung, W√§rmepumpe, Fernw√§rme, Holzpellets
‚Ä¢ **Wohnfl√§che:** Angabe in m¬≤, z.B. 120, 85, 200

Haben Sie weitere Fragen zu einem bestimmten Punkt?"""
        
        elif "weiter" in prompt.lower() or "n√§chste" in prompt.lower():
            return "Vielen Dank f√ºr Ihre Antwort! Das ist eine hilfreiche Information. Lassen Sie uns mit der n√§chsten Frage fortfahren."
        
        elif "fertig" in prompt.lower() or "abschluss" in prompt.lower():
            return "Herzlichen Gl√ºckwunsch! Sie haben alle Fragen beantwortet. Sie k√∂nnen nun Ihre Daten speichern und die Beratung abschlie√üen."
        
        else:
            return f"""Vielen Dank f√ºr die Angabe: "{prompt[:50]}..."

Das ist eine sehr hilfreiche Information f√ºr die Energieberatung. Diese Angabe unterst√ºtzt uns bei der professionellen Beurteilung Ihres Geb√§udes.

Kann ich Ihnen noch bei weiteren Details helfen oder haben Sie R√ºckfragen?"""
    
    else:
        if "anweisungen" in prompt.lower() or "instructions" in prompt.lower():
            return """Hier sind die wichtigsten Formularfelder f√ºr die Geb√§ude-Energieberatung:

‚Ä¢ **GEB√ÑUDEART:** Art des Geb√§udes (z.B. Einfamilienhaus, Doppelhaus, Reihenhaus)
‚Ä¢ **BAUJAHR:** Baujahr des Geb√§udes (wichtig f√ºr Energiestandards und F√∂rderungen)
‚Ä¢ **WOHNFL√ÑCHE:** Gesamtwohnfl√§che in m¬≤ (beheizte Fl√§che)
‚Ä¢ **HEIZUNGSART:** Aktuelles Heizsystem (Gas, √ñl, W√§rmepumpe, Fernw√§rme, etc.)
‚Ä¢ **D√ÑMMZUSTAND:** Zustand der W√§rmed√§mmung (Dach, W√§nde, Keller)
‚Ä¢ **FENSTERZUSTAND:** Alter und Zustand der Fenster (Einfach-, Doppel-, Dreifachverglasung)
‚Ä¢ **RENOVIERUNGSW√úNSCHE:** Geplante Sanierungsma√ünahmen und Priorit√§ten
‚Ä¢ **BUDGET:** Verf√ºgbares Budget f√ºr die energetische Sanierung

Bei Fragen zu einzelnen Feldern k√∂nnen Sie jederzeit nachfragen!"""
        
        else:
            return f"""Vielen Dank f√ºr Ihre Anfrage zur Geb√§ude-Energieberatung!

Ihre Anfrage: "{prompt[:100]}..."

F√ºr eine umfassende Beratung sind folgende Informationen besonders wichtig:
‚Ä¢ **Geb√§udeinformationen:** Baujahr, Gr√∂√üe, Art des Geb√§udes
‚Ä¢ **Aktueller Energiezustand:** Heizung, D√§mmung, Fenster
‚Ä¢ **Gew√ºnschte Sanierungsma√ünahmen:** Ihre Priorit√§ten und Ziele
‚Ä¢ **Verf√ºgbares Budget:** F√ºr realistische Planungsvorschl√§ge

Geben Sie die Informationen entsprechend Ihrem Geb√§ude ein. Bei Fragen oder Unklarheiten stehe ich Ihnen gerne zur Verf√ºgung!"""

# === GLOBAL SERVICES INITIALIZATION ===
try:
    drive_service = get_google_drive_service()
    drive_folder_id = create_or_get_drive_folder(drive_service, GOOGLE_DRIVE_FOLDER_NAME) if drive_service else None
    logger.info(f"üîß Services initialized - Google Drive: {'‚úÖ Connected' if drive_service else '‚ùå Local storage only'}")
except Exception as e:
    logger.error(f"‚ö†Ô∏è Service initialization failed: {str(e)[:100]}... - continuing with local storage")
    drive_service = None
    drive_folder_id = None

# Dialog session storage
dialog_sessions: Dict[str, Dict] = {}

# === REQUEST LOGGING MIDDLEWARE ===
@app.middleware("http")
async def log_requests(request: Request, call_next):
    start_time = datetime.now()
    
    try:
        client_host = "unknown"
        try:
            client_host = request.client.host if request.client else "unknown"
        except:
            pass
        
        logger.info(f"üì• {request.method} {request.url.path} from {client_host}")
        
        response = await call_next(request)
        
        duration = (datetime.now() - start_time).total_seconds()
        logger.info(f"üì§ {request.method} {request.url.path} -> {response.status_code} ({duration:.3f}s)")
        
        return response
    except Exception as e:
        logger.error(f"üí• Request middleware error: {str(e)[:100]}...")
        from fastapi.responses import JSONResponse
        return JSONResponse(
            status_code=500,
            content={"error": "Internal server error", "path": str(request.url.path)}
        )

# === API ENDPOINTS ===

@app.get("/")
async def root():
    """Root endpoint with comprehensive system information"""
    return {
        "message": "FormularIQ Backend - Complete Edition",
        "status": "healthy",
        "version": "3.2.0",
        "timestamp": datetime.now().isoformat(),
        "environment": "production" if IS_PRODUCTION else "development",
        "services": {
            "groq_llm": GROQ_AVAILABLE and bool(os.getenv("GROQ_API_KEY")),
            "google_drive": bool(drive_service),
            "local_storage": True,
            "dialog_sessions": len(dialog_sessions)
        },
        "features": [
            "ü§ñ Groq LLM Integration",
            "‚òÅÔ∏è Google Drive Cloud Storage", 
            "üí¨ Intelligent Chat System",
            "üé≠ Dialog-based Form Filling",
            "üìä Complete Study Data Collection",
            "üîÑ Robust Fallback Systems"
        ],
        "endpoints": {
            "health": "/health",
            "chat": "/api/chat",
            "instructions": "/api/generate-instructions",
            "save": "/api/save",
            "dialog_start": "/api/dialog/start",
            "dialog_message": "/api/dialog/message",
            "dialog_save": "/api/dialog/save",
            "study_save": "/api/study/save"
        }
    }

@app.get("/health")
async def health_check():
    """Comprehensive health check with service testing"""
    try:
        # Test Google Drive if available
        drive_status = "disconnected"
        if drive_service and drive_folder_id:
            try:
                test_data = {"health_check": True, "timestamp": datetime.now().isoformat()}
                test_filename = f"health_test_{datetime.now().strftime('%H%M%S')}.json"
                file_id, _ = upload_to_google_drive(drive_service, drive_folder_id, test_data, test_filename)
                if file_id:
                    # Clean up test file
                    try:
                        drive_service.files().delete(fileId=file_id).execute()
                        drive_status = "connected_and_writable"
                    except:
                        drive_status = "connected_read_only"
            except:
                drive_status = "connected_limited"
        
        # Test LLM service
        llm_status = "offline"
        try:
            test_response = call_llm_service("Test", "", dialog_mode=True)
            if "Groq LLM response successful" in str(test_response):
                llm_status = "groq_online"
            elif len(test_response) > 10:
                llm_status = "fallback_online"
            else:
                llm_status = "limited"
        except:
            llm_status = "offline"
        
        # Test local storage
        storage_status = "available"
        try:
            test_file = LOCAL_OUTPUT_DIR / "health_test.json"
            test_data = {"test": True, "timestamp": datetime.now().isoformat()}
            async with aiofiles.open(test_file, 'w') as f:
                await f.write(json.dumps(test_data))
            test_file.unlink()
        except:
            storage_status = "limited"
        
        return {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "version": "3.2.0",
            "environment": "production" if IS_PRODUCTION else "development",
            "services": {
                "google_drive": drive_status,
                "llm_service": llm_status,
                "local_storage": storage_status,
                "dialog_sessions": len(dialog_sessions)
            },
            "system": {
                "port": PORT,
                "host": HOST,
                "railway": IS_PRODUCTION,
                "output_directory": str(LOCAL_OUTPUT_DIR),
                "cors_origins": len(ALLOWED_ORIGINS)
            },
            "capabilities": {
                "groq_llm": GROQ_AVAILABLE and bool(os.getenv("GROQ_API_KEY")),
                "google_drive_libraries": GOOGLE_DRIVE_AVAILABLE,
                "cloud_backup": drive_status.startswith("connected"),
                "local_backup": storage_status == "available",
                "intelligent_chat": True,
                "dialog_system": True,
                "study_data_collection": True
            }
        }
        
    except Exception as e:
        logger.error(f"üíî Health check failed: {e}")
        return {
            "status": "degraded",
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
            "version": "3.2.0"
        }

@app.post("/api/generate-instructions")
async def generate_instructions(request: ContextRequest):
    """Generate intelligent form instructions using LLM"""
    try:
        logger.info(f"üìù Generating instructions with context: {request.context[:50]}...")
        
        prompt = f"""Erstelle 8-10 pr√§zise Formularfelder f√ºr eine professionelle Geb√§ude-Energieberatung.
        
Kontext: {request.context if request.context else 'Allgemeine Geb√§ude-Energieberatung'}

Die Anweisungen sollen klar, verst√§ndlich und hilfreich f√ºr Geb√§udeeigent√ºmer sein.
Jede Anweisung sollte spezifisch genug sein, um genaue Angaben zu erhalten."""
        
        # Try to get LLM-enhanced instructions
        try:
            llm_response = call_llm_service(prompt, request.context)
            # Parse LLM response for better instructions if possible
            # For now, use reliable defaults
        except:
            pass
        
        # High-quality default instructions
        instructions = [
            "Geben Sie die Art Ihres Geb√§udes an (z.B. Einfamilienhaus, Doppelhaush√§lfte, Reihenhaus, Mehrfamilienhaus)",
            "In welchem Jahr wurde das Geb√§ude errichtet? (wichtig f√ºr Energiestandards und F√∂rderungen)",
            "Wie gro√ü ist die beheizte Wohnfl√§che in Quadratmetern?",
            "Welche Art der Heizung ist aktuell installiert? (z.B. Gas, √ñl, W√§rmepumpe, Fernw√§rme, Holz)",
            "Beschreiben Sie den D√§mmzustand des Geb√§udes (Dach, Au√üenw√§nde, Keller)",
            "Welcher Fenstertyp ist installiert? (Einfach-, Doppel-, Dreifachverglasung)",
            "Welche energetischen Renovierungsma√ünahmen planen oder erw√§gen Sie?",
            "In welchem Budgetrahmen bewegen sich Ihre Sanierungspl√§ne? (grober Richtwert)"
        ]
        
        logger.info(f"‚úÖ Instructions generated: {len(instructions)} fields")
        return {"instructions": instructions}
        
    except Exception as e:
        logger.error(f"üí• Generate instructions failed: {e}")
        raise HTTPException(status_code=500, detail=f"Fehler beim Generieren der Anweisungen: {str(e)}")

@app.post("/api/chat")
async def chat(request: ChatRequest):
    """Intelligent chat help service with Groq LLM"""
    try:
        logger.info(f"üí¨ Chat request: {request.message[:50]}...")
        
        response = call_llm_service(request.message, request.context or "")
        
        logger.info("‚úÖ Chat response generated")
        return {"response": response}
        
    except Exception as e:
        logger.error(f"üí• Chat failed: {e}")
        raise HTTPException(status_code=500, detail=f"Chat-Service-Fehler: {str(e)}")

@app.post("/api/save")
async def save_form_data(request: SaveRequest):
    """Save form data with Google Drive backup"""
    try:
        logger.info(f"üíæ Saving form data: {len(request.instructions)} fields, {len(request.values)} values")
        
        save_data = {
            "variant": "A_sichtbares_formular",
            "timestamp": datetime.now().isoformat(),
            "instructions": request.instructions,
            "values": request.values,
            "metadata": {
                "total_fields": len(request.instructions),
                "filled_fields": len([v for v in request.values.values() if v.strip()]),
                "completion_rate": (len([v for v in request.values.values() if v.strip()]) / max(len(request.instructions), 1)) * 100
            },
            "study_metadata": {
                "project": "FormularIQ - LLM-gest√ºtzte Formularbearbeitung",
                "institution": "HAW Hamburg",
                "researcher": "Moritz Treu",
                "backend_version": "3.2.0"
            }
        }
        
        filename = f"formular_a_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        # Google Drive upload attempt
        storage_info = {"storage": "local"}
        if drive_service and drive_folder_id:
            try:
                file_id, web_link = upload_to_google_drive(drive_service, drive_folder_id, save_data, filename)
                if file_id:
                    storage_info = {
                        "storage": "google_drive",
                        "google_drive_id": file_id,
                        "web_link": web_link,
                        "folder": GOOGLE_DRIVE_FOLDER_NAME
                    }
            except Exception as drive_error:
                logger.warning(f"Google Drive upload failed: {drive_error}")
        
        # Local backup (always)
        try:
            local_path = LOCAL_OUTPUT_DIR / filename
            async with aiofiles.open(local_path, 'w', encoding='utf-8') as f:
                await f.write(json.dumps(save_data, ensure_ascii=False, indent=2))
            storage_info["local_path"] = str(local_path)
        except Exception as local_error:
            logger.error(f"Local backup failed: {local_error}")
        
        logger.info(f"‚úÖ Form data saved: {filename}")
        return {
            "message": "Formulardaten erfolgreich gespeichert",
            "filename": filename,
            **storage_info
        }
        
    except Exception as e:
        logger.error(f"üí• Save form data failed: {e}")
        raise HTTPException(status_code=500, detail=f"Fehler beim Speichern: {str(e)}")

@app.post("/api/dialog/start")
async def start_dialog(request: DialogStartRequest):
    """Start intelligent dialog session"""
    try:
        logger.info(f"üé≠ Starting dialog with context: {request.context[:50] if request.context else 'none'}")
        
        # Professional questions for building energy consultation
        questions = [
            {"question": "Welche Art von Geb√§ude m√∂chten Sie energetisch beraten lassen?", "field": "GEB√ÑUDEART"},
            {"question": "In welchem Jahr wurde das Geb√§ude errichtet?", "field": "BAUJAHR"},
            {"question": "Wie gro√ü ist die beheizte Wohnfl√§che in Quadratmetern?", "field": "WOHNFL√ÑCHE"},
            {"question": "Welche Art der Heizung ist aktuell installiert?", "field": "HEIZUNGSART"},
            {"question": "K√∂nnen Sie den aktuellen D√§mmzustand des Geb√§udes beschreiben?", "field": "D√ÑMMZUSTAND"},
            {"question": "Welcher Fenstertyp ist in Ihrem Geb√§ude eingebaut?", "field": "FENSTERTYP"},
            {"question": "Welche energetischen Renovierungsma√ünahmen planen oder erw√§gen Sie?", "field": "RENOVIERUNG"},
            {"question": "In welchem Budgetrahmen bewegen sich Ihre Sanierungspl√§ne?", "field": "BUDGET"}
        ]
        
        session_id = f"session_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        dialog_sessions[session_id] = {
            "questions": questions,
            "answers": {},
            "current_index": 0,
            "chat_history": [],
            "context": request.context,
            "created_at": datetime.now().isoformat()
        }
        
        logger.info(f"‚úÖ Dialog session created: {session_id} with {len(questions)} questions")
        return {
            "session_id": session_id,
            "questions": questions,
            "totalQuestions": len(questions),
            "currentQuestionIndex": 0,
            "currentQuestion": questions[0]
        }
        
    except Exception as e:
        logger.error(f"üí• Start dialog failed: {e}")
        raise HTTPException(status_code=500, detail=f"Fehler beim Dialog-Start: {str(e)}")

@app.post("/api/dialog/message")
async def dialog_message(request: DialogMessageRequest):
    """Process dialog message with intelligent LLM responses"""
    try:
        logger.info(f"üí¨ Dialog message: {request.message[:50]}...")
        
        # Handle help request
        if request.message.strip() == "?":
            help_text = "Geben Sie Informationen zu Ihrem Geb√§ude ein. Bei Unsicherheiten k√∂nnen Sie konkrete Beispiele oder Sch√§tzwerte angeben."
            
            if request.currentQuestion and "field" in request.currentQuestion:
                field = request.currentQuestion["field"]
                help_map = {
                    "GEB√ÑUDEART": "Beispiele: Einfamilienhaus, Doppelhaush√§lfte, Reihenhaus, Mehrfamilienhaus, Gewerbegeb√§ude",
                    "BAUJAHR": "Geben Sie das Errichtungsjahr an, z.B. 1975, 1990, 2005. Falls unbekannt, sch√§tzen Sie das Jahrzehnt.",
                    "WOHNFL√ÑCHE": "Gesamte beheizte Wohnfl√§che in m¬≤, z.B. 120, 85, 200. Bei Unsicherheit: grobe Sch√§tzung ist ausreichend.",
                    "HEIZUNGSART": "Beispiele: Gasheizung, √ñlheizung, W√§rmepumpe, Fernw√§rme, Holz-/Pelletheizung, Elektroheizung",
                    "D√ÑMMZUSTAND": "Beschreiben Sie: gut ged√§mmt, teilweise ged√§mmt, unged√§mmt, oder geben Sie an welche Bereiche ged√§mmt sind",
                    "FENSTERTYP": "Beispiele: Einfachverglasung (alt), Doppelverglasung (Standard), Dreifachverglasung (modern)",
                    "RENOVIERUNG": "Beschreiben Sie geplante Ma√ünahmen: neue Heizung, D√§mmung, Fenster, Dach, Solaranlage, etc.",
                    "BUDGET": "Grober Rahmen: unter 10.000‚Ç¨, 10.000-50.000‚Ç¨, 50.000-100.000‚Ç¨, √ºber 100.000‚Ç¨"
                }
                help_text = help_map.get(field, help_text)
            
            return {
                "response": f"üí° Hilfe: {help_text}",
                "nextQuestion": False,
                "helpProvided": True
            }
        
        # Process normal response with intelligent LLM
        context = ""
        if request.currentQuestion:
            context = f"Der Nutzer beantwortet die Frage '{request.currentQuestion.get('question')}' mit: '{request.message}'"
        
        prompt = """Best√§tige die Antwort kurz und freundlich (max. 2 S√§tze). 
        Sei ermutigend und professionell. Bedanke dich f√ºr die hilfreiche Angabe.
        Zeige, dass die Information f√ºr die Energieberatung wertvoll ist."""
        
        response = call_llm_service(prompt, context, dialog_mode=True)
        
        # Fallback if LLM doesn't respond adequately
        if len(response.strip()) < 15:
            response = f"Vielen Dank f√ºr die Angabe '{request.message}'! Das ist eine sehr hilfreiche Information f√ºr die Energieberatung Ihres Geb√§udes."
        
        logger.info("‚úÖ Dialog message processed with LLM")
        return {
            "response": response,
            "nextQuestion": True,
            "helpProvided": False
        }
        
    except Exception as e:
        logger.error(f"üí• Dialog message failed: {e}")
        return {
            "response": "Entschuldigung, es gab einen technischen Fehler. K√∂nnen Sie das bitte nochmal versuchen?",
            "nextQuestion": False,
            "helpProvided": False
        }

@app.post("/api/dialog/save")
async def save_dialog_data(request: DialogSaveRequest):
    """Save dialog data with Google Drive backup"""
    try:
        logger.info(f"üíæ Saving dialog data: {len(request.questions)} questions, {len(request.answers)} answers")
        
        save_data = {
            "variant": "B_dialog_system",
            "timestamp": datetime.now().isoformat(),
            "questions": request.questions,
            "answers": request.answers,
            "chatHistory": request.chatHistory,
            "metadata": {
                "total_questions": len(request.questions),
                "answered_questions": len([v for v in request.answers.values() if v.strip()]),
                "completion_rate": (len([v for v in request.answers.values() if v.strip()]) / max(len(request.questions), 1)) * 100,
                "chat_interactions": len(request.chatHistory)
            },
            "study_metadata": {
                "project": "FormularIQ - LLM-gest√ºtzte Formularbearbeitung",
                "institution": "HAW Hamburg",
                "researcher": "Moritz Treu",
                "backend_version": "3.2.0"
            }
        }
        
        filename = f"dialog_b_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        # Google Drive upload attempt
        storage_info = {"storage": "local"}
        if drive_service and drive_folder_id:
            try:
                file_id, web_link = upload_to_google_drive(drive_service, drive_folder_id, save_data, filename)
                if file_id:
                    storage_info = {
                        "storage": "google_drive",
                        "google_drive_id": file_id,
                        "web_link": web_link,
                        "folder": GOOGLE_DRIVE_FOLDER_NAME
                    }
            except Exception as drive_error:
                logger.warning(f"Google Drive upload failed: {drive_error}")
        
        # Local backup (always)
        try:
            local_path = LOCAL_OUTPUT_DIR / filename
            async with aiofiles.open(local_path, 'w', encoding='utf-8') as f:
                await f.write(json.dumps(save_data, ensure_ascii=False, indent=2))
            storage_info["local_path"] = str(local_path)
        except Exception as local_error:
            logger.error(f"Local backup failed: {local_error}")
        
        logger.info(f"‚úÖ Dialog data saved: {filename}")
        return {
            "message": "Dialog-Daten erfolgreich gespeichert",
            "filename": filename,
            **storage_info
        }
        
    except Exception as e:
        logger.error(f"üí• Save dialog data failed: {e}")
        raise HTTPException(status_code=500, detail=f"Fehler beim Dialog-Speichern: {str(e)}")

@app.post("/api/study/save")
async def save_complete_study_data(request: StudySaveRequest):
    """Save complete study data with comprehensive metadata"""
    try:
        logger.info(f"üìä Saving complete study data for participant: {request.participantId}")
        
        save_data = {
            "study_type": "complete_study_data",
            "participant_id": request.participantId,
            "start_time": request.startTime,
            "randomization": request.randomization,
            "demographics": request.demographics,
            "variant_a_data": request.variantAData,
            "variant_b_data": request.variantBData,
            "comparison_data": request.comparisonData,
            "total_duration": request.totalDuration,
            "completion_timestamp": datetime.now().isoformat(),
            "study_metadata": {
                "project": "FormularIQ - LLM-gest√ºtzte Formularbearbeitung",
                "institution": "HAW Hamburg",
                "researcher": "Moritz Treu",
                "backend_version": "3.2.0",
                "llm_service": "groq" if GROQ_AVAILABLE and os.getenv("GROQ_API_KEY") else "fallback",
                "storage_service": "google_drive" if drive_service else "local",
                "study_completion_rate": calculate_study_completion_rate(request)
            }
        }
        
        filename = f"complete_study_{request.participantId}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        # Google Drive upload attempt
        storage_results = {"storage": "local"}
        if drive_service and drive_folder_id:
            try:
                file_id, web_link = upload_to_google_drive(drive_service, drive_folder_id, save_data, filename)
                if file_id:
                    storage_results = {
                        "storage": "google_drive",
                        "google_drive_id": file_id,
                        "web_link": web_link,
                        "folder": GOOGLE_DRIVE_FOLDER_NAME
                    }
            except Exception as drive_error:
                logger.warning(f"Google Drive upload failed: {drive_error}")
                storage_results["drive_error"] = str(drive_error)
        
        # Local backup (always)
        try:
            local_path = LOCAL_OUTPUT_DIR / filename
            async with aiofiles.open(local_path, 'w', encoding='utf-8') as f:
                await f.write(json.dumps(save_data, ensure_ascii=False, indent=2))
            storage_results["local_path"] = str(local_path)
        except Exception as local_error:
            logger.error(f"Local backup failed: {local_error}")
            storage_results["local_error"] = str(local_error)
        
        logger.info(f"‚úÖ Complete study data saved: {filename}")
        return {
            "message": "Vollst√§ndige Studiendaten erfolgreich gespeichert",
            "participant_id": request.participantId,
            "filename": filename,
            "study_duration_minutes": round((request.totalDuration or 0) / 60000, 2),
            "completion_rate": calculate_study_completion_rate(request),
            **storage_results
        }
        
    except Exception as e:
        logger.error(f"üí• Save complete study data failed: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Fehler beim Speichern der Studiendaten: {str(e)}"
        )

def calculate_study_completion_rate(request: StudySaveRequest) -> float:
    """Calculate study completion rate (0-100%)"""
    completed_sections = 0
    total_sections = 5  # demographics, variant_a, variant_b, comparison, duration
    
    if request.demographics:
        completed_sections += 1
    if request.variantAData:
        completed_sections += 1
    if request.variantBData:
        completed_sections += 1
    if request.comparisonData:
        completed_sections += 1
    if request.totalDuration and request.totalDuration > 0:
        completed_sections += 1
    
    return round((completed_sections / total_sections) * 100, 2)

# === STARTUP MESSAGE ===
logger.info("üöÄ FormularIQ Backend v3.2.0 - Complete Edition ready")
logger.info(f"üîß Services: Groq={'‚úÖ' if GROQ_AVAILABLE and os.getenv('GROQ_API_KEY') else '‚ùå'}, Drive={'‚úÖ' if drive_service else '‚ùå'}")
logger.info("‚úÖ All systems ready for requests")

# === MAIN ===
if __name__ == "__main__":
    logger.info(f"üöÄ Starting FormularIQ Backend v3.2.0")
    logger.info(f"üåê Server: {HOST}:{PORT}")
    
    uvicorn.run(
        app,
        host=HOST,
        port=PORT,
        reload=False,
        log_level="info"
    )